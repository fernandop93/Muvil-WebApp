{"remainingRequest":"/Users/ferp93/Otros/GIt/muvilWeb/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ferp93/Otros/GIt/muvilWeb/src/views/ChildContent.vue?vue&type=template&id=173cea77&","dependencies":[{"path":"/Users/ferp93/Otros/GIt/muvilWeb/src/views/ChildContent.vue","mtime":1636818113545},{"path":"/Users/ferp93/Otros/GIt/muvilWeb/node_modules/cache-loader/dist/cjs.js","mtime":1634753517854},{"path":"/Users/ferp93/Otros/GIt/muvilWeb/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1634753512364},{"path":"/Users/ferp93/Otros/GIt/muvilWeb/node_modules/cache-loader/dist/cjs.js","mtime":1634753517854},{"path":"/Users/ferp93/Otros/GIt/muvilWeb/node_modules/vue-loader/lib/index.js","mtime":1634753512359}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}